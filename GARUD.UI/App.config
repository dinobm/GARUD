<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,Log4net"/>
    
  </configSections>
  <log4net>
    <root>
      <level value="DEBUG"/>
      <appender-ref ref="SmtpAppender"/>
      <appender-ref ref="LogFileAppender"/>
      <appender-ref ref="ColoredConsoleAppender"/>
    </root>
    <appender name="LogFileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="..\..\logs\\logger.log"/>
      <param name="AppendToFile" value="true"/>
      <rollingStyle value="Size"/>
      <maxSizeRollBackups value="10"/>
      <maximumFileSize value="1MB"/>
      <staticLogFileName value="true"/>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger: %message%newline"/>
      </layout>
    </appender>
   
   
   
  </log4net>
  <appSettings>
    <add key="TestCaseQuery" value="; WITH GARUD AS ( SELECT  COL.TABLE_NAME, TAB.TABLE_TYPE, TAB.TABLE_SCHEMA, COL.COLUMN_NAME,  COL.CHARACTER_MAXIMUM_LENGTH, 
         COL.CHARACTER_OCTET_LENGTH, IS_NULLABLE, DATA_TYPE, TABCONS.CONSTRAINT_TYPE, TABCONS.CONSTRAINT_NAME  FROM INFORMATION_SCHEMA.COLUMNS COL INNER JOIN 
         (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE') TAB ON COl.TABLE_NAME= TAB.TABLE_NAME AND	COL.TABLE_SCHEMA = TAB.TABLE_SCHEMA LEFT OUTER JOIN 
         INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE COLCONS ON COL.COLUMN_NAME	 = COLCONS.COLUMN_NAME  AND	COL.TABLE_NAME = COLCONS.TABLE_NAME AND
         TAB.TABLE_SCHEMA = COLCONS.TABLE_SCHEMA LEFT OUTER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS TABCONS ON COLCONS.TABLE_NAME = TABCONS.TABLE_NAME 
         AND COLCONS.CONSTRAINT_NAME = TABCONS.CONSTRAINT_NAME AND COLCONS.TABLE_SCHEMA = TABCONS.TABLE_SCHEMA ) ,
         PrimaryKeyValidator AS ( SELECT TABLE_NAME,TABLE_SCHEMA, COLUMN_NAME =  STUFF((SELECT ', ' + COLUMN_NAME FROM GARUD b WHERE 
         CONSTRAINT_TYPE='PRIMARY KEY' AND b.TABLE_NAME = a.TABLE_NAME  AND b.TABLE_SCHEMA  = a.TABLE_SCHEMA FOR XML PATH('')), 1, 2, '') FROM 
         GARUD a WHERE CONSTRAINT_TYPE='PRIMARY KEY' GROUP BY TABLE_NAME,TABLE_SCHEMA  ) , ForeignKeyValidator AS (SELECT TABLE_NAME,TABLE_SCHEMA, COLUMN_NAME
         =  STUFF((SELECT ', ' + COLUMN_NAME FROM GARUD b WHERE  CONSTRAINT_TYPE='FOREIGN KEY' AND b.TABLE_NAME = a.TABLE_NAME  
         AND b.TABLE_SCHEMA = a.TABLE_SCHEMA FOR XML PATH('')), 1, 2, '') FROM GARUD a WHERE CONSTRAINT_TYPE='FOREIGN KEY' GROUP BY TABLE_NAME,TABLE_SCHEMA  ) ,
         uniqueValidator AS ( SELECT TABLE_NAME,TABLE_SCHEMA, COLUMN_NAME = STUFF((SELECT ', ' + COLUMN_NAME FROM GARUD b WHERE CONSTRAINT_TYPE='UNIQUE' AND b.TABLE_NAME = a.TABLE_NAME 
         AND b.TABLE_SCHEMA = a.TABLE_SCHEMA AND a.CONSTRAINT_NAME = b.CONSTRAINT_NAME FOR XML PATH('')), 1, 2, '') FROM GARUD a WHERE CONSTRAINT_TYPE='UNIQUE' 
         GROUP BY TABLE_NAME,TABLE_SCHEMA, CONSTRAINT_NAME ) , GARUDMatrix AS ( SELECT TABLE_SCHEMA, Table_Name, 
         'Check Primary key columns ' + COLUMN_NAME + ' in the ' + TABLE_SCHEMA + '.'+ TABLE_NAME TestCase  FROM PrimaryKeyValidator 
         UNION SELECT TABLE_SCHEMA, Table_Name, 'Check Referential Integrity of columns ' + COLUMN_NAME + ' in the ' + TABLE_SCHEMA + '.'+ TABLE_NAME FROM ForeignKeyValidator  
         UNION SELECT TABLE_SCHEMA, Table_Name, 'Check Unique values in Columns ' + COLUMN_NAME + ' in the ' + TABLE_SCHEMA + '.'+ TABLE_NAME FROM uniqueValidator )
         SELECT TABLE_SCHEMA TableSchema, Table_Name TableName, TestCase FROM GARUDMatrix ORDER BY TABLE_SCHEMA, Table_Name"></add>

    <add key="DesignCheckQuery" value="; WITH GARUD AS ( SELECT COL.TABLE_NAME, TAB.TABLE_TYPE, TAB.TABLE_SCHEMA, COL.COLUMN_NAME, COL.CHARACTER_MAXIMUM_LENGTH,
COL.CHARACTER_OCTET_LENGTH, IS_NULLABLE, DATA_TYPE, TABCONS.CONSTRAINT_TYPE, TABCONS.CONSTRAINT_NAME FROM INFORMATION_SCHEMA.COLUMNS COL
INNER JOIN (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE') TAB ON COl.TABLE_NAME= TAB.TABLE_NAME
AND COL.TABLE_SCHEMA = TAB.TABLE_SCHEMA LEFT OUTER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE COLCONS ON
	COL.COLUMN_NAME	 = COLCONS.COLUMN_NAME AND COL.TABLE_NAME = COLCONS.TABLE_NAME AND 	TAB.TABLE_SCHEMA = COLCONS.TABLE_SCHEMA
LEFT OUTER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS TABCONS ON COLCONS.TABLE_NAME = TABCONS.TABLE_NAME AND COLCONS.CONSTRAINT_NAME = TABCONS.CONSTRAINT_NAME
AND COLCONS.TABLE_SCHEMA = TABCONS.TABLE_SCHEMA WHERE TABCONS.CONSTRAINT_TYPE = 'PRIMARY KEY' ) ,
ALLCOLUMNS AS ( SELECT COLUMN_NAME, TAB.TABLE_NAME, TAB.TABLE_SCHEMA, COL.CHARACTER_MAXIMUM_LENGTH, COL.CHARACTER_OCTET_LENGTH, IS_NULLABLE, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS COL
INNER JOIN INFORMATION_SCHEMA.TABLES TAB ON COL.TABLE_NAME=TAB.TABLE_NAME AND COL.TABLE_SCHEMA=TAB.TABLE_SCHEMA WHERE TAB.TABLE_TYPE='BASE TABLE'  )
SELECT A.Table_Name BaseTable, A.Table_Schema BaseSchema,A.COLUMN_NAME BaseColName, B.Table_Name TableName, B.Table_Schema TableSchema,B.Column_Name ColumnName,
CASE WHEN A.IS_NullABLE &lt; &gt;  B.IS_Nullable THEN 'Nullable Field Mismatch' ELSE NULL END AS NullableMismatch
, CASE WHEn A.DATA_TYPE &lt; &gt;  B.DATA_TYPE THEN 'Datatype Mismatch' ELSE NULL END AS DatatypeMismatch
, Case WHEN A.CHARACTER_MAXIMUM_LENGTH &lt; &gt;  B.CHARACTER_MAXIMUM_LENGTH THEN 'Column Max Length Mismatch' ELSE NULL END AS MaxSizeMismatch
, Case WHEN A.CHARACTER_OCTET_LENGTH &lt; &gt;  B.CHARACTER_OCTET_LENGTH THEN 'Column Octet Length Mismatch' ELSE NULL END AS OctetSizeMismatch
 FROM GARUD A LEFT OUTER JOIN ALLCOLUMNS B ON A.COLUMN_NAME = B.COLUMN_NAME
WHERE A.TABLE_NAME &lt; &gt;  B.TABLE_NAME
AND A.TABLE_SCHEMA &lt; &gt;  B.TABLE_SCHEMA
 ORDER BY A.Table_Name
"/>
  </appSettings>
 
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>
